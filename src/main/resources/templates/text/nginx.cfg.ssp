#import com.inspurusa.consul.apigateway.integration.data.SvcInfo
<%@ val domainsMap: scala.collection.Map[String,scala.collection.Iterable[com.inspurusa.consul.apigateway.integration.data.SvcInfo]] %>
<%@ val services: scala.collection.Iterable[com.inspurusa.consul.apigateway.integration.data.SvcInfo] %>

#only need upstreams for keycloac and kong

<% services.foreach(s =>{
   if( true || "kong" == s.name || "keycloak" == s.name) {
   %>

upstream <%=s.name %> {
   <% s.nodes.foreach(n =>{ %>
      server <%=n.ip%>:<%=n.port.toString%>
   <% }) %>
}

 <% }
}) %>


server {

    listen 443 ssl;

    include letsencrypt/le.conf;
    ssl_dhparam /etc/nginx/dhparam.pem;

    root /var/www/html;

    # Add index.php to the list if you are using PHP
    index index.html index.htm index.nginx-debian.html;

    server_name internal.inspur.io;


    location /auth {
        proxy_http_version 1.1; # this is essential for chunked responses to work
        proxy_buffering    off;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Scheme $scheme;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   Host $http_host;
        proxy_set_header   X-Forwarded-Proto  $scheme;
        proxy_pass http://keycloak;
    }


}



server {
        listen 80 default_server;

        root /usr/share/nginx/html;
        index index.html index.htm;

        # Make site accessible from http://localhost/
        server_name {domain};

        location /.well-known/ {
           try_files $uri $uri/ =404;
         }


        location / {
            return 301 https://$host$request_uri;
         }

}






<% domainsMap.foreach( dm =>{ %>
server {
    listen 80 default_server;
    server_name <%= dm._1%>;

    location /.well-known/acme-challenge {
        root /var/www/letsencrypt;
    }
    # ...
}
server {
    listen 443 ssl;
    server_name <%= dm._1%>;
    ssl_dhparam /etc/nginx/dhparam.pem;
    ssl_certificate /etc/letsencrypt/live/<%= dm._1%>/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/<%= dm._1%>/privkey.pem;

    location / {

        proxy_http_version 1.1; # this is essential for chunked responses to work
        proxy_buffering    off;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Scheme $scheme;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   Host $http_host;
        proxy_set_header   X-Forwarded-Proto  $scheme;
        proxy_pass http://kong;
        # First attempt to serve request as file, then
        # as directory, then fall back to displaying a 404.
        #try_files $uri $uri/ =404;
    }
}
<% })%>

